import { httpFetch } from '../../request'
import { formatPlayTime, sizeFormate } from '../../index'
import { formatSingerName } from '../utils'

/**
 * Ëé∑ÂèñÊ≠åÊâã‰ø°ÊÅØÂ≠óÁ¨¶‰∏≤
 */
const getSinger = (singers) => {
  if (!singers || !Array.isArray(singers)) return ''
  return singers.map(singer => singer.name).join('„ÄÅ')
}

/**
 * Â§ÑÁêÜÊ≠åÊõ≤ÂàóË°®Êï∞ÊçÆ
 * ËøîÂõûÁ¨¶Âêà LX.Music.MusicInfo Á±ªÂûãÁöÑÊï∞ÊçÆÁªìÊûÑ
 */
const handleMusicResult = (rawList) => {
  if (!rawList || !Array.isArray(rawList)) return []
  
  return rawList.map(rawItem => {
    // QQÈü≥‰πêÁöÑÊ≠åÊõ≤Êï∞ÊçÆÂèØËÉΩÂú® songInfo ÈáåÈù¢
    const item = rawItem.songInfo || rawItem
    
    const types = []
    const _types = {}
    let size

    // Â§ÑÁêÜÈü≥Ë¥®‰ø°ÊÅØ
    const file = item.file || {}
    
    if (file.size_128mp3 && file.size_128mp3 != 0) {
      size = sizeFormate(file.size_128mp3)
      types.push({ type: '128k', size })
      _types['128k'] = { size }
    }
    if (file.size_320mp3 && file.size_320mp3 !== 0) {
      size = sizeFormate(file.size_320mp3)
      types.push({ type: '320k', size })
      _types['320k'] = { size }
    }
    if (file.size_flac && file.size_flac !== 0) {
      size = sizeFormate(file.size_flac)
      types.push({ type: 'flac', size })
      _types.flac = { size }
    }
    if (file.size_hires && file.size_hires !== 0) {
      size = sizeFormate(file.size_hires)
      types.push({ type: 'flac24bit', size })
      _types.flac24bit = { size }
    }

    // Â§ÑÁêÜ‰∏ìËæë‰ø°ÊÅØ
    let albumId = ''
    let albumName = ''
    let albumMid = ''
    if (item.album) {
      albumName = item.album.name || item.album.title || ''
      albumId = item.album.id || item.album.albumID || ''
      albumMid = item.album.mid || item.album.albumMid || item.album.albumMID || ''
    }

    // Â§ÑÁêÜÊ≠åÊâã‰ø°ÊÅØ
    const singerList = item.singer || item.singers || []
    const singerName = getSinger(singerList)
    const singerMid = singerList.length > 0 ? singerList[0].mid : ''

    // ËøîÂõûÁ¨¶Âêà LX.Music.MusicInfo Á±ªÂûãÁöÑÁªìÊûÑ
    return {
      id: String(item.mid || item.songmid),
      name: item.name || item.title || item.songname || '',
      singer: singerName,
      source: 'tx',
      interval: formatPlayTime(item.interval || item.time_public || 0),
      meta: {
        songId: item.id || item.songid,
        albumName,
        albumId: albumMid || albumId,
        albumMid: albumMid,
        strMediaMid: file.media_mid || '',
        songmid: item.mid || item.songmid,
        picUrl: (albumMid === '' || albumMid === 'Á©∫')
          ? (singerMid ? `https://y.gtimg.cn/music/photo_new/T001R500x500M000${singerMid}.jpg` : '')
          : `https://y.gtimg.cn/music/photo_new/T002R500x500M000${albumMid}.jpg`,
        qualitys: types,
        _qualitys: _types,
      },
    }
  })
}

export default {
  /**
   * Ëé∑ÂèñÊ≠åÊâãÂàÜÁ±ªÂàóË°®
   * Ê≥®ÊÑèÔºöQQÈü≥‰πêÂºÄÊîæÂπ≥Âè∞APIÈúÄË¶Å app_id Á≠âËÆ§ËØÅ‰ø°ÊÅØ
   * ËøôÈáå‰ΩøÁî®ÂÖ¨ÂºÄÁöÑ QQÈü≥‰πê APIÔºàÂäüËÉΩÂèóÈôêÔºâ
   * 
   * @param {Object} params - Êü•ËØ¢ÂèÇÊï∞
   * @param {number} params.area - Âú∞Âå∫: -100:ÂÖ®ÈÉ®, 200:ÂÜÖÂú∞, 2:Ê∏ØÂè∞, 3:Èü©ÂõΩ, 4:Êó•Êú¨, 5:Ê¨ßÁæé
   * @param {number} params.type - Á±ªÂûã: -100:ÂÖ®ÈÉ®, 0:Áî∑, 1:Â•≥, 2:ÁªÑÂêà
   * @param {number} params.genre - ÊµÅÊ¥æ: -100:ÂÖ®ÈÉ®, 1:ÊµÅË°å, 2:ÊëáÊªö, etc.
   * @param {string} params.initial - È¶ñÂ≠óÊØç: 'Hot':ÂÖ®ÈÉ®(ÁÉ≠Èó®), 'A'-'Z', '#':ÁâπÊÆäÂ≠óÁ¨¶
   * @param {number} params.limit - ËøîÂõûÊï∞ÈáèÔºåÈªòËÆ§30
   * @param {number} params.offset - ÂÅèÁßªÊï∞ÈáèÔºåÈªòËÆ§0
   * @returns {Promise}
   */
  list(params = {}) {
    const { area = -100, type = -100, genre = -100, initial = 'Hot', limit = 30, offset = 0 } = params
    
    console.log('üîç Fetching QQ Music artist list:', { area, type, genre, initial, limit, offset })
    
    // ËÆ°ÁÆó index ÂèÇÊï∞ÔºàÈ¶ñÂ≠óÊØçÁ¥¢ÂºïÔºå-100Ë°®Á§∫ÁÉ≠Èó®Ôºâ
    let indexParam = -100
    if (initial !== 'Hot' && initial !== '-1' && initial !== -1) {
      // Â¶ÇÊûúÊòØÂ≠óÊØçÊàñ#Ôºå‰ΩøÁî®Áõ∏Â∫îÁöÑÁ¥¢Âºï
      if (initial === '#') {
        indexParam = 0
      } else if (initial >= 'A' && initial <= 'Z') {
        indexParam = initial.charCodeAt(0) - 'A'.charCodeAt(0) + 1
      } else if (initial >= 'a' && initial <= 'z') {
        indexParam = initial.charCodeAt(0) - 'a'.charCodeAt(0) + 1
      }
    }
    
    // ‰ΩøÁî®QQÈü≥‰πêÁöÑÊ≠åÊâãÂàóË°®API
    const requestObj = httpFetch('https://u.y.qq.com/cgi-bin/musicu.fcg', {
      method: 'post',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Referer': 'https://y.qq.com/',
      },
      body: {
        comm: {
          ct: 24,
          cv: 0,
        },
        singerList: {
          module: 'Music.SingerListServer',
          method: 'get_singer_list',
          param: {
            area,
            sex: type,
            genre,
            index: indexParam,
            sin: offset,
            cur_page: Math.floor(offset / limit) + 1,
          },
        },
      },
    })
    
    return requestObj.promise.then(({ body, statusCode }) => {
      console.log('üì¶ QQ Music API response:', { statusCode, code: body?.code })
      
      if (statusCode !== 200) {
        console.error('‚ùå HTTP error:', statusCode)
        return { list: [], total: 0 }
      }
      
      if (!body || body.code !== 0) {
        console.error('‚ùå API error:', body?.code, body?.message)
        console.log('üì¶ Full response:', JSON.stringify(body, null, 2))
        return { list: [], total: 0 }
      }
      
      const data = body.singerList?.data || {}
      const artists = data.singerlist || []
      
      console.log('üë• Found', artists.length, 'artists, total:', data.total)
      
      if (artists.length > 0) {
        console.log('üìã First artist:', artists[0])
        console.log('üìã First artist keys:', Object.keys(artists[0]))
      }
      
      return {
        list: artists.map(artist => ({
          id: artist.singer_id,
          name: artist.singer_name,
          picUrl: `https://y.gtimg.cn/music/photo_new/T001R300x300M000${artist.singer_mid}.jpg`,
          // QQÈü≥‰πêAPIÂèØËÉΩÊ≤°ÊúâËøîÂõû‰∏ìËæëÊï∞ÈáèÔºåÊöÇÊó∂ËÆæ‰∏∫0Êàñ‰ªéÂÖ∂‰ªñÂ≠óÊÆµËé∑Âèñ
          albumSize: artist.albumsize || artist.album_num || artist.albumNum || 0,
          musicSize: artist.songnum || artist.song_num || artist.songNum || 0,
        })),
        total: data.total || artists.length,
      }
    }).catch(error => {
      console.error('‚ùå Artist list request failed:', error)
      return { list: [], total: 0 }
    })
  },

  /**
   * Ëé∑ÂèñÊ≠åÊâãÁÉ≠Èó®50È¶ñÊ≠åÊõ≤
   * @param {number} singerId - Ê≠åÊâãID
   * @returns {Promise}
   */
  topSong(singerId) {
    console.log('üéµ Fetching top songs for artist:', singerId)
    
    const requestObj = httpFetch('https://u.y.qq.com/cgi-bin/musicu.fcg', {
      method: 'post',
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)',
        'Referer': 'https://y.qq.com/',
      },
      body: {
        comm: {
          ct: 24,
          cv: 0,
        },
        singerSong: {
          method: 'GetSingerSongList',
          param: {
            order: 1, // 1: ÊåâÁÉ≠Â∫¶, 0: ÊåâÊó∂Èó¥
            singerMid: '',
            singerId: singerId,
            begin: 0,
            num: 50,
          },
          module: 'musichall.song_list_server',
        },
      },
    })
    
    return requestObj.promise.then(({ body, statusCode }) => {
      if (statusCode !== 200) {
        console.error('‚ùå HTTP error:', statusCode)
        return []
      }
      
      if (!body || body.code !== 0) {
        console.error('‚ùå API error:', body?.code)
        return []
      }
      
      const data = body.singerSong?.data || {}
      const songs = data.songList || []
      
      console.log('üéµ Found', songs.length, 'top songs')
      
      if (songs.length > 0) {
        console.log('üéµ First song raw data:', JSON.stringify(songs[0], null, 2))
      }
      
      const result = handleMusicResult(songs)
      
      if (result.length > 0) {
        console.log('üéµ First song processed:', JSON.stringify(result[0], null, 2))
      }
      
      return result
    }).catch(error => {
      console.error('‚ùå Top songs request error:', error)
      return []
    })
  },

  /**
   * Ëé∑ÂèñÊ≠åÊâãÂÖ®ÈÉ®Ê≠åÊõ≤
   * @param {Object} params - Êü•ËØ¢ÂèÇÊï∞
   * @param {number} params.id - Ê≠åÊâãID
   * @param {string} params.order - ÊéíÂ∫è: 'hot'(ÁÉ≠Èó®) Êàñ 'time'(Êó∂Èó¥)
   * @param {number} params.limit - ËøîÂõûÊï∞ÈáèÔºåÈªòËÆ§50
   * @param {number} params.offset - ÂÅèÁßªÊï∞ÈáèÔºåÈªòËÆ§0
   * @returns {Promise}
   */
  songs(params = {}) {
    const { id, order = 'hot', limit = 50, offset = 0 } = params
    
    console.log('üéµ Fetching songs for artist:', id, { order, limit, offset })
    
    const requestObj = httpFetch('https://u.y.qq.com/cgi-bin/musicu.fcg', {
      method: 'post',
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)',
        'Referer': 'https://y.qq.com/',
      },
      body: {
        comm: {
          ct: 24,
          cv: 0,
        },
        singerSong: {
          method: 'GetSingerSongList',
          param: {
            order: order === 'hot' ? 1 : 0, // 1: ÊåâÁÉ≠Â∫¶, 0: ÊåâÊó∂Èó¥
            singerMid: '',
            singerId: id,
            begin: offset,
            num: limit,
          },
          module: 'musichall.song_list_server',
        },
      },
    })
    
    return requestObj.promise.then(({ body, statusCode }) => {
      if (statusCode !== 200) {
        console.error('‚ùå HTTP error:', statusCode)
        return { list: [], total: 0 }
      }
      
      if (!body || body.code !== 0) {
        console.error('‚ùå Songs API error:', body?.code)
        return { list: [], total: 0 }
      }
      
      const data = body.singerSong?.data || {}
      const songs = data.songList || []
      const total = data.totalNum || 0
      
      console.log('üéµ Found', songs.length, 'songs, total:', total)
      
      return {
        list: handleMusicResult(songs),
        total,
      }
    }).catch(error => {
      console.error('‚ùå Songs request error:', error)
      return { list: [], total: 0 }
    })
  },

  /**
   * Ëé∑ÂèñÊ≠åÊâã‰∏ìËæë
   * @param {Object} params - Êü•ËØ¢ÂèÇÊï∞
   * @param {number} params.id - Ê≠åÊâãID
   * @param {number} params.limit - ËøîÂõûÊï∞ÈáèÔºåÈªòËÆ§50
   * @param {number} params.offset - ÂÅèÁßªÊï∞ÈáèÔºåÈªòËÆ§0
   * @param {string} params.order - ÊéíÂ∫èÊñπÂºè: 'time'(Êó∂Èó¥, ÈªòËÆ§) Êàñ 'hot'(ÁÉ≠Â∫¶)
   * @returns {Promise}
   */
  album(params = {}) {
    const { id, limit = 50, offset = 0, order = 'time' } = params
    
    console.log('üíø Fetching albums for artist:', id, { limit, offset, order })
    
    // ‰ΩøÁî®QQÈü≥‰πêÊóßÁâàAPI
    const requestObj = httpFetch(`https://c.y.qq.com/v8/fcg-bin/fcg_v8_singer_album.fcg?singerid=${id}&order=${order === 'hot' ? 'listen' : 'time'}&begin=${offset}&num=${limit}&format=json&inCharset=utf8&outCharset=utf-8`, {
      method: 'get',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Referer': 'https://y.qq.com/n/yqq/singer/',
      },
    })
    
    return requestObj.promise.then(({ body, statusCode }) => {
      console.log('üíø Album API response:', { statusCode, code: body?.code })
      
      if (statusCode !== 200) {
        console.error('‚ùå HTTP error:', statusCode)
        return { list: [], total: 0 }
      }
      
      if (!body || body.code !== 0) {
        console.error('‚ùå Album API error:', body?.code)
        console.log('üíø Full response:', JSON.stringify(body, null, 2))
        return { list: [], total: 0 }
      }
      
      // ÊóßÁâàAPIÁöÑÊï∞ÊçÆÁªìÊûÑ
      const data = body.data || {}
      const albums = data.list || []
      const total = data.total || 0
      
      console.log('üíø Found', albums.length, 'albums, total:', total)
      
      if (albums.length > 0) {
        console.log('üíø First album:', JSON.stringify(albums[0], null, 2))
        console.log('üíø First album keys:', Object.keys(albums[0]))
      }
      
      return {
        list: albums.map(album => ({
          id: album.albumID || album.albumid,
          name: album.albumName || album.albumname,
          mid: album.albumMID || album.albummid,
          picUrl: `https://y.gtimg.cn/music/photo_new/T002R300x300M000${album.albumMID || album.albummid}.jpg`,
          artistId: id,
          artistName: album.singerName || album.singername || '',
          // Â∞ùËØïÂ§öÁßçÂèØËÉΩÁöÑÂ≠óÊÆµÂêçÔºåÊñ∞APIÁöÑÊ≠åÊõ≤Êï∞Âú® latest_song.song_count Èáå
          size: (album.latest_song && album.latest_song.song_count) || album.song_count || album.songnum || album.songNum || album.cur_song_num || album.songCount || 0,
          publishTime: album.pub_time ? new Date(album.pub_time * 1000).getTime() : 0,
          company: album.company || '',
          description: album.desc || '',
        })),
        total,
      }
    }).catch(error => {
      console.error('‚ùå Album request error:', error)
      return { list: [], total: 0 }
    })
  },
}

